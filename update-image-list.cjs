#!/usr/bin/env node
/**
 * Auto-generate equipmentImageList.ts from actual files in public/equipment-icons/
 * Run this after adding new images
 */

const fs = require('fs');
const path = require('path');

const ICONS_DIR = './public/equipment-icons';
const OUTPUT_FILE = './src/utils/equipmentImageList.ts';

// Read all .webp files from the directory
const files = fs.readdirSync(ICONS_DIR)
  .filter(file => file.endsWith('.webp'))
  .map(file => file.replace('.webp', '').normalize('NFC')) // Normalize to NFC for consistency
  .sort((a, b) => a.localeCompare(b, 'sv')); // Swedish alphabet sorting

console.log(`Found ${files.length} images in ${ICONS_DIR}`);

// Generate the TypeScript file content
const content = `/**
 * List of available equipment images
 * Update this list whenever you add new images to public/equipment-icons/
 *
 * AUTO-GENERATED by update-image-list.cjs
 * Do not edit manually - run: node update-image-list.cjs
 */

const availableImages = [
${files.map(name => `  '${name}',`).join('\n')}
];

/**
 * Find best matching image for given search term
 * Supports partial matching and Swedish characters
 */
export const findMatchingImage = (searchTerm: string): string | undefined => {
  if (!searchTerm || searchTerm.trim().length < 3) {
    return undefined;
  }

  // Normalize: Unicode NFC, lowercase, trim, convert spaces to underscores
  const normalized = searchTerm.normalize('NFC').toLowerCase().trim().replace(/\\s+/g, '_');

  // Try exact match first (normalized)
  const exactMatch = availableImages.find(img =>
    img.normalize('NFC').toLowerCase() === normalized
  );
  if (exactMatch) return exactMatch;

  // Try starts-with match
  const startsWithMatch = availableImages.find(img =>
    img.normalize('NFC').toLowerCase().startsWith(normalized)
  );
  if (startsWithMatch) return startsWithMatch;

  // Try substring match (contains)
  const substringMatch = availableImages.find(img =>
    img.normalize('NFC').toLowerCase().includes(normalized)
  );

  return substringMatch;
};
`;

// Write the file
fs.writeFileSync(OUTPUT_FILE, content);

console.log(`âœ… Updated ${OUTPUT_FILE} with ${files.length} images`);
console.log('\nFirst 5 images:');
files.slice(0, 5).forEach(name => console.log(`  - ${name}`));
